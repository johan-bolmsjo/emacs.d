#+title: Johan Bolmsjö's GNU Emacs Configuration
#+html_head: <link rel="stylesheet" type="text/css" href="https://bitmaster.se/css/org-mini.css" />
#+options: toc:nil num:2 H:4 author:nil timestamp:t ^:nil

Installation instruction:
#+begin_src sh
  git clone github.com/johan-bolmsjo/emacs.d ~/.emacs.d
#+end_src

#+toc: headlines 2

* The Init File
:PROPERTIES:
:CUSTOM_ID: init-file
:END:

Requires GNU Emacs version 28.1 or greater.

The main init file is =init.el=.
This file loads packages that require external programs to function properly.
See chapter [[External Tools]] for how to install required programs for specific packages.

** Overview

Overview of enabled packages.

*** Package Management

Emacs packages are installed using the [[https://github.com/radian-software/straight.el][straight]] package manager.
The advantage with this package manager is that it keeps the complete upstream Git repositories available together with lock files to pin down exact versions.
This means that the Emacs configuration is reproducible.
It's also possible to easily change package versions to resolve incompatibilities when the configuration is
copied between hosts with different Emacs versions.

The version lock file =~/.emacs.d/straight/versions/default.el= is versioned by this Git repository.

The actual upstream package source code is not managed by this Git repository.
They are downloaded by Emacs when started.
For local backup purposes it's possible to just archive the whole =~/.emacs.d= directory.
It's transferable between machines.

*** Documentation Modes

- [[https://orgmode.org/][Org Mode]]
- [[https://daringfireball.net/projects/markdown/][Markdown]]
- [[https://plantuml.com/][PlantUML]]
  
*** Programming Languages Modes

All programming language modes except elisp use eglot to provide code navigation and completion support.

- C/C++ (builtin)
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][elisp]] (builtin)
- [[https://go.dev/][Go]]
- [[https://ocaml.org/][OCaml]] (externally managed)
- [[https://www.python.org/][Python]] (builtin)
- [[https://ziglang.org/][Zig]]

*** Miscellaneous Support Functions

- Auto complete through auto-complete or company modes.
- Compiler diagnostics through flycheck or flymake modes.
- Extraneous whitespace indications.
- GDB support through gud mode.
- Git interface through magit.
- Improved "find file" completions through ido mode.
- Project like IDE support using treemacs, project.el and eglot modes.
- Templated auto complete assisted snippets through yasnippet mode.

** Keybindings

Keybindings that are specific to this configuration file.

*** User Keybindings

See https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html for user keybinding conventions.
Also http://xahlee.info/emacs/emacs/keyboard_shortcuts.html for practical overrides.

- =C-c a= :: =align-current=
- =C-c c= :: =compile=
- =C-c g= :: =find-grep=
- =C-c i= :: =ispell-region=
- =C-c j= :: =goto-line= (kept for muscle memory, there is =M-g g= for goto-line)
- =C-c k= :: auto complete (in progamming modes)
- =C-c o= :: =ff-find-other-file= (in c-mode-common)
- =C-c s= :: =sort-lines=
- =C-c t= :: toggle treemacs pane

**** Incremental Search

- =C-c k= :: isearch mark and exit
- =C-c o= :: =isearch-occur=
- =C-c SPC= :: =isearch-toggle-lax-whitespace=

**** Navigation

Even though these functions are called =error=, they work in many contexts. E.g. moving through compilation errors, grep results, xref references.

- =F9= :: =next-error=
- =F10= :: =prev-error= (overrides global menu popup)

**** Window Management

Commands useful to prevent Emacs from splitting frames and replacing buffers in windows when doing certain tasks.

- =C-c F= :: Lock current frame for automatic splitting.
- =C-c f= :: Unlock current frame for automatic splitting.
- =C-c W= :: Lock current window to its current buffer.
- =C-c w= :: Unlock current window from its current buffer.

See https://smythp.com/emacs_buffers/ for an explanation of the frames, windows and buffers terminology.

**** Org Mode

- =C-c n= :: =org-capture= (take quick note)
- =C-c p= :: =org-agenda= (planning)
- =C-c L= :: =org-store-link= (works in other modes to store links)

**** Eglot Mode

Note that eglot relies on the keybindings of other packages for most functions.
E.g. xref for navigation and eldoc for documentation.

- =C-c e a= :: =eglot-code-actions=
- =C-c e f= :: =eglot-format= (ask server to format buffer or the active region)
- =C-c e r= :: =eglot-rename= (rename symbol at point)
- =C-c e i= :: =eglot-find-implementation=
- =C-c e t= :: =eglot-find-typeDefinition=

**** Flymake Mode

Aligned with flycheck counterparts.

- =C-c ! l= :: =flymake-show-buffer-diagnostics=
- =C-c ! n= :: =flymake-goto-next-error=
- =C-c ! p= :: =flymake-goto-prev-error=

**** GDB (debugger)

- =F5= :: Continue program being debugged.
- =F6= :: Step till next source line, do not enter subroutine (next).
- =F7= :: Step till next source line, enter subroutine (step).
- =F8= :: Execute until current stack frame returns.
- =S-F8= :: Stop debugging

*** Overridden Keybindings

Modifies standard Emacs behavior or use non-user prefix.

- =F10= :: =prev-error= (overrides global menu popup)
- =M-n= :: =scroll-up-command=
- =M-p= :: =scroll-down-command=
- =M-f= :: =forward-symbol= (replaces forward-word)
- =M-b= :: =my/backward-symbol= (replaces backward-word)
- =M-C-f= :: =forward-paragraph= (replaces forward-sexp)
- =M-C-b= :: =backward-paragraph= (replaces backward-sexp)
- =C-x k= :: =my/fast-kill-buffer= (replaces kill-buffer)
- =C-x C-b= :: =bs-show= (replaces list-buffers)

** User Facing Functions

Convenience functions defined by the configuration.

- =reload-file= :: =revert-buffer= without confirmation (no keybinding)

** Configuration Adaptations

Configuration adaptations that may be desired when applying this Emacs configuration in a new environment.

*** Shell Environment                                            :optional:

You may want to source =~/.emacs.d/etc/bashrc= from your =~/.bashrc= file.
Read the small script to find its purpose.

#+begin_src sh
  if [ -f ~/.emacs.d/etc/bashrc ]; then
      . ~/.emacs.d/etc/bashrc
  fi
#+end_src

You may also want to source =~/.emacs.d/etc/profile= from your =~/.profile= or =~/.bash_profile= to add =~/.emacs.d/bin= to the program search path.

#+begin_src sh
  if [ -f ~/.emacs.d/etc/profile ]; then
      . ~/.emacs.d/etc/profile
  fi
#+end_src

*** Fonts                                                        :optional:

A personal choice, my current favorite monospaced fonts can be found in the =~/.emacs.d/fonts/gofont= directory.

Installation (Linux):
#+begin_src sh
  mkdir -p ~/.fonts
  cp ~/.emacs.d/fonts/gofont/*.ttf ~/.fonts
#+end_src

Update the /Fonts/ section in =~/.emacs.d/init.el= with your preferred fonts.

*** Indexed Grep

I've opted to replace the =grep-find= command with a wrapper script that invokes a grep program based on an index.
This speeds up grep operations in large code bases massively but it may not be to your liking.
Just delete the entire section "Indexed grep search tool" from =~/.emacs.d/init.el= to restore the original behavior.

See section [[#ext-indexed-grep]] for details.

*** Custom Variables

Variables that may need customization (such as file paths) are stored in =~/.emacs.d/custom.el=.

** Quick Guides

Scattered quick guides for my own memory.
It could do with more information for Emacs neophytes.

*** Navigation

Xref is used by many Emacs modes for navigation, including Eglot for navigating source code.

- =M-,= :: Go back
- =M-.= :: Find thing
- =M-?= :: Find references

*** Buffer and Filename Completion

[[https://www.masteringemacs.org/article/introduction-to-ido-mode][Ido mode]] is used for buffer and file name completions.
There are some keybindings that are particularly useful and easily forgotten.

- =C-p= :: Toggles prefix matching; when it’s on the input will only match the
  beginning of a filename.
- =C-SPC= :: Restricts the completion list to anything that matches the current
  input. This enables iterative reduction of matches.

*** Incremental Search

Don't forget about the occur mode when doing incremental search.
Invoke =C-c o= to get an overview of all matches in the current document.

*** Magit

[[https://magit.vc][Magit]] is a complete text-based user interface to Git.
The magit status command is bound to =M-x g=.

*** Org Mode

[[http://orgmode.org][Org mode]] is a documentation and planning major mode.
Some HOWTO notes are kept in file:docs/howto-org-mode.org.

*** Text Templates

Text template support is provided by the [[https://github.com/joaotavora/yasnippet][yasnippet]] package.
Sippets are kept under =~/.emacs.d/snippets/MODE/FILE=.

Example org mode snippet with with one completion argument stored in file =~/.emacs.d/snippets/org-mode/src=:
#+begin_src
  # -*- mode: snippet -*-
  # name: org/src
  # key: .src
  # --
  ,#+begin_src $1
  $0
  ,#+end_src
#+end_src

Templates are expanded by typing their name (=.src= in the example above) and pressing space bar.

*** Code Completion

Code completion is provided by either the [[https://github.com/auto-complete/auto-complete][auto-complete]] or [[http://company-mode.github.io][company]] package.
The code complete action is triggered by =C-c k=.

*** Diagnostics

Diagnostics such as compiler errors are provied by either the flycheck or flymake package.

*** Language Server Protocol Support

[[https://github.com/joaotavora/eglot/blob/master/MANUAL.md][Eglot]] works in concert with project.el to identify [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Projects.html][projects]].
Only version controlled directories can become projects.
Eglot can only analyze files that belongs to a project.

Invoke =M-x p p= to add a project, select the /... (choose a dir)/ option.
Tracked projects are stored in =~/.emacs.d/projects=.

Eglot must be started manually from an opened file that belongs to a project.
This is done by invoking =M-x eglot=.
Eglot may ask for the language server to use if it can't find one or there are multiple choices.
After having done this once, eglot does not prompt for other files in the same project.

Eglot is well integrated with core Emacs packages.
Apart from the mentioned xref it use the eldoc package to display documentation and type information.
Invoke =C-h .= to show documentation at point.


* External Tools

Unfortunately the [[#init-file][Emacs init file]] is not self contained.
External tools are required to support many packages.

** Indexed Grep
:PROPERTIES:
:CUSTOM_ID: ext-indexed-grep
:END:

The tool [[https://github.com/johan-bolmsjo/codesearch][codesearch]] provides fast, indexed regexp search over large file trees.

Install the following commands (requires Go toolchain).
#+begin_src sh
  go install github.com/johan-bolmsjo/codesearch/cmd/{cindex,csearch}@latest
#+end_src

Note that the only integration is that the =grep-find= command has been changed to invoke =~/.emacs.d/bin/csearch-color= instead.

The convenience scripts in =~/.emacs.d/bin/= has the following purpose:

- =cindex-append= :: Scan directories for source files to add to code index.
- =cindex-reset= :: Clear code index.
- =csearch-color= :: Colorize grep matches for Emacs.

** Shell Script Mode

Install the shellcheck linter to get good advice on shell script constructs.

Ubuntu/Debian specific instruction:
#+begin_src sh
  apt install shellcheck
#+end_src

** PlantUML Documentation

Install [[https://plantuml.com/][PlantUML]].

Ubuntu/Debian specific instruction:
#+begin_src sh
  apt install plantuml
#+end_src

** Go Programming Language Mode

- Install the Go programming language toolchain as instructed on https://go.dev/dl/
- Install required tools:
  #+begin_src sh
    go install golang.org/x/tools/gopls@latest
    go install golang.org/x/tools/cmd/goimports@latest
    go install golang.org/x/tools/cmd/gorename@latest
    go install github.com/rogpeppe/godef@latest
  #+end_src

** OCaml Programming Language Mode

- Install the OCaml language toolchain from https://ocaml.org/releases/
- Install required tools:
  #+begin_src sh
    opam update
    opam switch create 4.13.1
    opam install dune utop ocaml-lsp-server merlin tuareg ocp-indent odig
  #+end_src

The OCaml setup is a bit special in that the Emacs packages are installed by the steps above.
Not by the Emacs package manager.

** Python Programming Language Mode
*** Python Virtual Environments

Pyenv is used to compartmentalize python installations and make it possible to switch between them for different projects.

Install pyenv from https://github.com/pyenv/pyenv:

Clone the pyenv repo:
#+begin_src sh
  git clone https://github.com/pyenv/pyenv.git ~/.pyenv
  cd ~/.pyenv && src/configure && make -C src
#+end_src

Put the following in =~/.bashrc=:
#+begin_src sh
  export PYENV_ROOT="$HOME/.pyenv"
  if [ -d "$PYENV_ROOT" ]; then
      command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
  fi
#+end_src

Apply the changes in the current shell (or login again):
#+begin_src sh
  exec "$SHELL"
#+end_src

Install Python build dependencies (Ubuntu specific, refer to https://github.com/pyenv/pyenv/wiki#suggested-build-environment for other OSes):
#+begin_src sh
  sudo apt-get update
  sudo apt-get install make build-essential libssl-dev zlib1g-dev libbz2-dev \
       libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils \
       tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
#+end_src

Install a Python version using pyenv:
#+begin_src sh
  pyenv install 3.10.7
#+end_src

Switching between Python versions:

- =pyenv shell VERSION= :: Select just for current shell session.
- =pyenv local VERSION= :: Automatically select whenever you are in the
  current directory (or its subdirectories).
- =pyenv global VERSION= :: Select globally for your user account.

*** Language Server

Install the language server:
#+begin_src sh
  pip install 'python-language-server[all]' scrapy
#+end_src

** Zig Programming Language Mode

- Install the language toolchain from https://ziglang.org/download/
- Install the language server from https://github.com/zigtools/zls/


* Compiling GNU Emacs

Compiling [[https://www.gnu.org/software/emacs/][GNU Emacs]] from source is quite easy.
Many packages see heavy development and may require a recent version.

Install dependencies (Ubuntu 22.04 specific):

#+begin_src sh
  sudo apt install libjansson-dev libxpm-dev libgif-dev libgnutls28-dev \
       libxaw7-dev libncurses-dev libgccjit-11-dev
#+end_src

Download, configure, build and install GNU Emacs on Linux:

#+begin_src sh
  wget https://ftp.acc.umu.se/mirror/gnu.org/gnu/emacs/emacs-28.2.tar.xz
  tar xf emacs-28.2.tar.xz
  cd emacs-28.2
  ./configure \
      --with-native-compilation \
      --with-mailutils \
      --with-x-toolkit=lucid \
      --prefix=$HOME/.local
  make -j16
  make install
#+end_src

Make sure that Cairo is used for the GUI in the configure stage or some library dependency is missing.

-----
